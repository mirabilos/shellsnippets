# $MirOS: contrib/code/Snippets/getshver,v 1.25 2021/04/03 21:17:01 tg Exp $
#-
# Copyright (c) 2009, 2010, 2011, 2012, 2013, 2014, 2016, 2018,
#		2019, 2021
#	mirabilos <m@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# There's also this one (although mksh never sets $SH_VERSION):
# http://www.in-ulm.de/~mascheck/various/whatshell/whatshell.sh.html

# escape this from tclsh \
`""""true; echo true` unless q # escape from Python, Perl

# escape this from tclsh \
set x = 1
# escape this from tclsh \
test 1 = "$x" && goto CSH

# BEGIN of Tcl section (((
# escape this from tclsh \
x='
if {[info exists ::jim_argv0]} {set v "jimsh"} elseif {[info commands tk] != ""} {set v "wish"} {set v "tclsh"}
if {[info exists ::tcl_version]} {
	append v " " $::tcl_version
	if {[info exists ::tcl_patchLevel]} {append v " (" $::tcl_patchLevel ")"}
} elseif {[info exists ::tcl_patchLevel]} {append v " " $::tcl_patchLevel}
set u 0
set w " on"
if {[info exists ::tcl_platform(machine)]} {set u 1; append w " " $::tcl_platform(machine)}
if {[info exists ::tcl_platform(byteOrder)]} {set u 1; append w " (" $::tcl_platform(byteOrder) ")"}
if {[info exists ::tcl_platform(os)]} {
	set u 1
	append w " " $::tcl_platform(os)
	if {[info exists ::tcl_platform(osVersion)]} {append w " " $::tcl_platform(osVersion)}
} else {append w " unknown"}
if {[info exists ::tcl_platform(platform)]} {set u 1; append w " (" $::tcl_platform(platform) ")"}
if {$u == 1} {append v $w}
set w ","
if {[info exists ::tcl_platform(threaded)]} {
	append w " "
	if {$::tcl_platform(threaded) != 1} {append w "non"}
	append w "threaded"
}
if {[info exists ::tcl_platform(debug)]} {
	append w " "
	if {$::tcl_platform(debug) != 1} {append w "non"}
	append w "debug"
}
if {[info exists ::tcl_interactive]} {
	append w " "
	if {$::tcl_interactive != 1} {append w "non"}
	append w "interactive"
}
if {[string equal $w ","] == 0} {append v $w}
puts $v
exit 0
'
# ))) END of Tcl section

LC_ALL=C
export LC_ALL

if test x"`echo u ^ echo x`" = x"x"; then
	# Bourne shell, maybe Heirloom sh (tested)
	echo bourne
	exit 0
fi
if test x"$(echo u)" != x"u"; then
	# other non-POSIX shell, maybe Solaris /bin/sh
	echo binsh
	exit 0
fi
# POSIX shell

case $ZSH_VERSION in
*[0-9]*) echo "zsh $ZSH_VERSION"; exit 0 ;;
esac

case $VERSION in
zsh*) printf "zsh-old $VERSION"; exit 0 ;;
esac

case $YASH_VERSION in
*.*) echo "yash $YASH_VERSION"; exit 0 ;;
esac

case $NETBSD_SHELL in
2*) echo "nbsh $NETBSD_SHELL"; exit 0 ;;
esac

case x$SHELL_VERSION in
x) ;;
*[0-9]*build*)
	if ( (set -o korn) && (set -o bash) ) >/dev/null 2>/dev/null; then
		# MKS {,Korn,Bash} Shell (fixed by Michael Langguth)
		( # subshell, just in case
		typeset _o

		_o=`set -o`
		if [ -z "${_o##*-o bash*}" ]; then
			echo "mksbash $SHELL_VERSION"
		elif [ -z "${_o##*-o korn*}" ]; then
			echo "mksksh $SHELL_VERSION"
		else
			echo "mkssh $SHELL_VERSION"
		fi ) || echo "mks $SHELL_VERSION"
		exit 0
	fi
	;;
esac

x=
case x$BASH_VERSION in
# no GNU bash
x) ;;
# known GNU bash versions
x2*) x=bash2 ;;
x3*) x=bash3 ;;
x4*) x=bash4 ;;
# either bash1 or an unlikely version
*) x=bash ;;
esac
if test x"$x" != x""; then
	echo "$x $BASH_VERSION"
	exit 0
fi

# ksh93, various branches thereof
x=.sh.version
(eval x=\$\{$x\}) 2>/dev/null || x=fail
if test fail != "$x"; then
	if builtin XBell >/dev/null 2>&1; then
		dgk=dtksh situ=ksh2020+dt
	else
		dgk=ksh93 situ=ksh2020
	fi
	y=`eval 'echo $((KSH_VERSION))' 2>/dev/null` || y=88
	case $y in
	[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]) z=" (($y))" ;;
	*) y=0 z= ;;
	esac
	if test $y -eq 20209999; then
		z=$situ$z	# ksh2020 fallback version numbers
	elif test $y -gt 20200513; then
		z=$dgk$z	# assume all following releases are ksh93+m
	elif test $y -gt 20140929; then
		z=$situ$z	# ksh2020
	else
		z=$dgk$z	# AT&T ksh93
	fi
	eval echo '$z ${.sh.version#Version }'
	exit 0
fi
# lksh, mksh, mirbsdksh (pre-mksh), oksh (3.7+), pdksh
case $KSH_VERSION in
*LEGACY\ KSH*) echo "mksh-legacy ${KSH_VERSION#*KSH }" ; exit 0 ;;
*MIRBSD\ KSH*) echo "mksh ${KSH_VERSION#*KSH }" ; exit 0 ;;
*PD\ KSH*MirOS*) echo "pdksh-mbsd${KSH_VERSION#*PD KSH}"; exit 0 ;;
*PD\ KSH*)
	if test x"`typeset -i10 x=0x10 2>/dev/null; echo $x`" = x"16"; then
		# printing KSH_VERSION here is rather useless though
		echo "pdksh-obsd ${KSH_VERSION#*KSH }"
	else
		# unspecified: Debian (modern), 5.2.14 (sorta modern),
		# some older or vendor-modified version, old oksh
		echo "pdksh ${KSH_VERSION#*KSH }"
	fi
	exit 0 ;;
esac
case $SH_VERSION in
*PD\ KSH*MirOS*) echo "pdksh-binsh-mbsd${SH_VERSION#*PD KSH}"; exit 0 ;;
*PD\ KSH*)
	if test x"`typeset -i10 x=0x10 2>/dev/null; echo $x`" = x"16"; then
		# printing SH_VERSION here is rather useless though
		echo "pdksh-binsh-obsd ${SH_VERSION#*KSH }"
	else
		# unspecified: Debian (modern), 5.2.14 (sorta modern),
		# some older or vendor-modified version, old oksh
		echo "pdksh-binsh ${SH_VERSION#*KSH }"
	fi
	exit 0 ;;
esac
# AT&T ksh88
if (
	typeset _p

	_p='f+([ o])bar'
	eval [[ foobar = $_p '&&' \"foo bar\" = $_p ]]
) 2>/dev/null; then
	echo ksh88
	exit 0
fi
# AT&T ksh86
test x"$(LC_ALL=C; type print 2>&1)" = x"print is a shell builtin" && \
    case `print -- 2>&1` in
*'bad option'*)
	echo 'ksh86 06/03/86(/a)'
	exit 0
	;;
esac

# posh (pdksh without Korn shell)
if test x"$POSH_VERSION" != x""; then
	echo "posix-posh $POSH_VERSION"
	exit 0
fi
if ( [[ 0 < 1 ]] ) 2>/dev/null; then
	echo posix-ext
	exit 0
fi
if test x"`
	foo() {
		local a

		a=2
	}
	a=1
	foo
	echo $a
    `" = x"1"; then
	# we have a working "local"
	if test x"$(PATH=/nonexistent; export PATH
	    exec 2>/dev/null; printf 'f%so' o)" = x"foo"; then
		# probably, but not certain
		# also: (old) NetBSD /bin/sh (e.g. on MirBSD); dash on Debian
		echo posix-dash
		exit 0
	fi
	# test if we fulfil Debian Policy 10.4
	if ( test 1 -eq 1 -a a = a ) && test x"`echo -n a;
	    echo -n b`" = x"ab"; then
		echo posix-debian
		exit 0
	fi
fi
if test x"`echo -n a; echo -n b`" = x"ab"; then
	echo posix-echon
	exit 0
fi
if test x"`echo a'\c'; echo b`" = x"ab"; then
	echo posix-echoc
	exit 0
fi
echo posix
exit 0
# ksh93 continues parsing here, so make it ignore until EOF
:<<\#EOF

CSH:

if { bindkey >& /dev/null } then
	echo "tcsh $tcsh"
else
	echo csh
endif
exit 0

# back to Perl
 eq '';
print "perl $] on $^O\n";
exit 0;
__END__

# back to Python
"""`
import sys
print("Python " + sys.version)
#EOF

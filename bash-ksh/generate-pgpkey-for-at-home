#!/bin/sh
# $Id: genkey-privatgebrauch.sh 2710 2012-02-07 09:27:07Z tglase $
#-
# Copyright © 2010, 2011
#	Thorsten Glaser <t.glaser@tarent.de>
# All rights reserved.
#
# Licenced under the GNU AGPLv3.
#-
# Generate a new GnuPG (PGP) key, for private use.

# check if we're called with mksh or bash; fix if not
if test -z "$shell_tried"; then
	if test -z "$KSH_VERSION"; then
		if mksh -c true >/dev/null 2>&1; then
			shell_tried=1
			export shell_tried
			exec mksh "$0" "$@"
		fi
		if test -z "$BASH_VERSION"; then
			if bash -c true >/dev/null 2>&1; then
				shell_tried=1
				export shell_tried
				exec bash "$0" "$@"
			fi
		fi
	fi
fi
if test -z "$KSH_VERSION$BASH_VERSION"; then
	echo >&2 "I've tried but couldn't find mksh or GNU bash."
	echo >&2 "Please call me with one of these shells."
	exit 1
fi
unset shell_tried

# set up some basic environment
export LC_ALL=C
unset LANG LANGUAGE
test -z "$BASH_VERSION" || shopt -s extglob
# we can now use Korn Shell extensions common to mksh and GNU bash

# initiate logging
cd "$(dirname "$0")"
log="$(basename "$0").log"
cat >>"$log" <<-EOF

	New key generation started (Privatgebrauch)
	$(date)
	===========================================
EOF
test -z "$KSH_VERSION" || echo ksh >>"$log"
test -z "$BASH_VERSION" || echo bash >>"$log"

# check for existence of prerequisite tools
for tool in gpg wget; do
	$tool --version >/dev/null 2>&1 && continue
	echo >&2 You must install $tool to continue.
	exit 1
done

# subroutine for converting a string into an array
# taking into account Korn Shell vs GNU bash syntax
str2arr() {
	local _a _b _s _vn=$1

	eval _s=\$$_vn
	if [[ -n $KSH_VERSION ]]; then
		_a="set -A $_vn -- "
		_b=
	else
		_a="${_vn}=("
		_b=")"
	fi
	eval $_a$_s$_b
}

# subroutines for converting array elements into hex,
# printing with escapes honoured/ignored
# taking into account Korn Shell vs GNU bash syntax
if [[ -n $KSH_VERSION ]]; then
	alias arr2hex='typeset -i16 '
	alias eprint='print -n'
	alias nprint='print -nr -- '
else
	arr2hex() {
		local _vn=$1 _i _n _v

		_i=0
		eval _n='${#'$_vn'[*]}'
		while (( _i < _n )); do
			eval _v='${'$_vn'[_i]}'
			_v=$(printf '16#%x' $_v)
			eval $_vn'[_i++]=$_v'
		done
	}
	eprint() {
		printf "$@"
	}
	nprint() {
		printf '%s' "$*"
	}
fi

### BEGIN imported code {{{
# Copyright (c) 2008
#	Thorsten Glaser <tg@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.

# read a password without echoing
askpass() {
	set -o noglob
	stty -echo
	echo -n "$1 "
	read resp
	stty echo
	set +o noglob
	echo
}

# convert a string from UTF-8 or ISO-8859-1 to UTF-8
str2utf8() {
	local _s="$*" _z _c _i _hv _wc _n

	_c=$(nprint "$_s" | hexdump -ve '1/1 "16#%x "')
	_c="$_c 0"
	str2arr _c
	_s=
	_z=0
	_i=0
	while (( _c[_i] )); do
		(( _hv = _c[_i] ))
		if (( (_hv < 16#C2) || (_hv >= 16#F0) )); then
			_n=1
		elif (( _hv < 16#E0 )); then
			_n=2
		else
			_n=3
		fi
		if (( _n > 1 )); then
			(( (_c[_i + 1] & 16#C0) == 16#80 )) || _n=1
			(( _hv == 16#E0 )) && \
			    (( _c[_i + 1] < 16#A0 )) && _n=1
		fi
		if (( _n > 2 )); then
			(( (_c[_i + 2] & 16#C0) == 16#80 )) || _n=1
			(( _hv == 16#EF && _c[_i + 1] == 16#EF && \
			    _c[_i + 2] > 16#BD )) && _n=1
		fi
		case $_n in
		(1)
			if (( (_wc = _c[_i]) < 16#80 )); then
				(( _s[_z++] = _wc ))
			else
				(( _s[_z++] = 16#C0 | (_wc >> 6) ))
				(( _s[_z++] = 16#80 | (_wc & 16#3F) ))
			fi
			;;
		(2)
			(( _s[_z++] = _c[_i] ))
			(( _s[_z++] = _c[_i + 1] ))
			;;
		(3)
			(( _s[_z++] = _c[_i] ))
			(( _s[_z++] = _c[_i + 1] ))
			(( _s[_z++] = _c[_i + 2] ))
			;;
		esac
		(( _i += _n ))
	done
	arr2hex _s
	eprint "$(echo ${_s[*]} | sed -e 's/16#/\\x/g' -e 's/ //g')"
}

### END imported code }}}

# create a temporary directory in /dev/shm (Linux tmpfs) or /tmp (otherwise)
if [[ ! -d /dev/shm/. ]] || ! T=$(mktemp -d /dev/shm/genkey.XXXXXXXXXX); then
	if ! T=$(mktemp -d /tmp/genkey.XXXXXXXXXX); then
		echo >&2 Cannot create temporary directory.
		exit 1
	fi
fi

cleanup() {
	trap - 0 1 2 3 13 15
	# files to overwrite before removing
	for wipefiles in resp wgetrc; do
		for x in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16; do
			echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
		done >"$T/$wipefiles"
	done
	sync
	rm -rf "$T"
	exit $1
}

# make sure the temporary files are removed if we are interrupted
trap "cleanup 1" 1 2 3 13 15
trap "cleanup 0" 0


# request and record user/pass
echo -n "Vor- und Zuname: "
read i_name
[[ -n $i_name ]] || cleanup 0
echo -n "eMail-Adresse: "
read i_mail
echo -n "Kommentarfeld: "
read i_comm
echo "Generiere für: '$i_name${i_comm:+ "($i_comm)"}${i_mail:+ "<$i_mail>"}' (^C wenn falsch)"
askpass "Password:"
[[ -n $resp ]] || cleanup 0
pw1=$resp
askpass "Password (nochmal):"
[[ -n $resp ]] || cleanup 0
if [[ $pw1 != $resp ]]; then
	echo Sind nicht gleich.
	cleanup 1
fi

echo "userdata: $i_name ($i_comm) <$i_mail>" >>"$log"

# add entropy from CGIs to that pool (magic code ;) {{{
if [[ ! -s ~/.gnupg/random_seed ]]; then
	# create and fill if it didn't exist
	:>~/.gnupg/random_seed
	chmod 0600 ~/.gnupg/random_seed
	dd if=/dev/urandom of=~/.gnupg/random_seed bs=600 count=1
fi
entropy=$x\ $(wget -O - --no-check-certificate -T 10 2>/dev/null https://spamfilter3.tarent.de/lb.cgi?genkey.sh,1=$(hostname -f),seed=$RANDOM$RANDOM$RANDOM$RANDOM$RANDOM | hexdump -ve '1/1 "16#%x "')
poolfile=$(hexdump -ve '1/1 "16#%x "' <~/.gnupg/random_seed)
str2arr entropy
str2arr poolfile
(( n = ${#poolfile[*]} < ${#entropy[*]} ? ${#entropy[*]} : ${#poolfile[*]} ))
i=0
# XOR poolfile with new entropy (from CGIs)
while (( i < n )); do
	(( poolfile[i % ${#poolfile[*]}] ^= entropy[i % ${#entropy[*]}] ))
	let i++
done
# write back into the pool file
arr2hex poolfile
eprint "$(echo ${poolfile[*]} | sed -e 's/16#/\\x/g' -e 's/ //g')" | \
    dd of=~/.gnupg/random_seed conv=notrunc 2>/dev/null
# }}} end of magic code block ;)

# create response file for gpg
# NOTE:	Key-Length can go up to 8192 (not more!) but please no lower
#	than 2048 (although more than 4096 may be incompatible *AND*
#	TERRIBLY SLOW)
cat >"$T/resp" <<-EOF
	%echo Generating the key for $i_name ($i_mail) $i_comm
	Key-Type: RSA
	Key-Length: 3072
	Key-Usage: auth,encrypt,sign
	Passphrase: $(str2utf8 "$resp")
	Name-Real: $(str2utf8 "$i_name")
	${i_comm:+Name-Comment: $(str2utf8 "$i_comm")}
	${i_mail:+Name-Email: $(str2utf8 "$i_mail")}
	Expire-Date: 3y
	Preferences: H8 H3 S8 S4 Z2 Z0 H9 H10 S9 S7
	Keyserver: hkp://pgp.uni-mainz.de
	%commit
	%echo done
EOF

# really generate the key
echo
(gpg --no-use-agent --batch --gen-key "$T/resp"; echo $? >"$T/rc") 2>&1 | \
    tee "$T/gen.out"
echo
(echo "create key {"; sed 's/^/	/' <"$T/gen.out"; echo "}") >>"$log"
# check for error exit
if (( $(<"$T/rc") > 0 )); then
	echo >&2 Key generation failed.
	cleanup 1
fi
# scan the gpg log for keyid of keypair just created
pkid=$(sed -n \
    's/^gpg: key \([0-9A-F]*\) marked as ultimately trusted.*$/\1/p' \
    "$T/gen.out")
if [[ $pkid != +([0-9A-F]) ]] || ! gpg -K $pkid; then
	echo >&2 '┌─────────────────────────────────────────────────────────┐'
	echo >&2 '│ Finding the key failed. YOU CAN USE THE KEY, BUT YOU    │'
	echo >&2 '│ *MUST* CONTACT THE ADMINS with this error message.      │'
	echo >&2 '│ Kann den neuen Schlüssel nicht finden. DU KANNST DIESES │'
	echo >&2 '│ SCHLÜSSELPAAR BENUTZEN, ABER DU *MUẞT* DIE ADMINS mit   │'
	echo >&2 '│ dieser Fehlernachricht KONTAKTIEREN.                    │'
	echo >&2 '└─────────────────────────────────────────────────────────┘'
	echo
	echo >&2 Cannot find the key just generated.
	cleanup 1
fi

# apply preference settings to our newly generated key
gpg --no-use-agent -q -u $pkid --command-fd 4 --edit-key $pkid \
    >>"$T/edit.log" 2>&1 4<<-EOF
	notation preferred-email-encoding@pgp.com=partitioned,pgpmime
	$(str2utf8 "$resp")
	trust
	5
	y
	save
EOF
echo "=> $?" >>"$T/edit.log"

	cat >&2 <<'EOF'
┌─────────────────────────────────────────┐
│ Key generation finished with no errors. │
│ Schlüsselerzeugung fehlerfrei erledigt. │
└─────────────────────────────────────────┘

╔═════════════════════════════════════════════════════════════════════╗
║ You are responsible for backing up yout PGP secret key BY YOURSELF! ║
║ Du mußt SELBER für Sicherungskopiën des privaten Schlüssels sorgen! ║
╚═════════════════════════════════════════════════════════════════════╝
EOF
(echo "finished:"; gpg -k $pkid | sed 's/^/|	/'; echo) >>"$log"
echo >&2
gpg -k $pkid || echo gpg ERROR -k: $?
cleanup 0

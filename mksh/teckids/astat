# -*- mode: sh -*-
#-
# Copyright © 2016
#	Thorsten “mirabilos” Glaser <thorsten.glaser@teckids.org>
# Copyright © 2014, 2015
#	Thorsten “mirabilos” Glaser <tg@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.
#-
# Age statistic analysis

[[ -n $TECKIDS_COMMON ]] && . "$TECKIDS_COMMON"
export LC_ALL=C.UTF-8
nl='
'
mydir=$(realpath "$0"/..)

# call this with desired scale and bc formula
function bcfixup {
	REPLY=$(bcfixup2 "$@")
	[[ $REPLY = .* ]] && REPLY=0$REPLY
}
function bcfixup2 {
	local bcf=$2 dscale=$1 cs cl epsilon=0. i=$1

	while (( i-- > 0 )); do
		epsilon+=0
	done
	epsilon+=5

	bc <<-EOF
		scale = 20 + ($dscale)
		x = ($bcf)
		if (x > 0) x += $epsilon
		if (x < 0) x -= $epsilon
		scale = ($dscale)
		print (x / 1)
	EOF
}

function x_select {
	local fo=
	while read -Ar line; do
		if [[ -z $fo ]]; then
			if [[ ${line[0]} != ℹ ]]; then
				print -ru2 "E: invalid first column"
				exit 1
			fi
			set -A fo -- 0
			for x in "$@"; do
				i=${#line[@]}
				while (( i-- )); do
					if [[ ${line[i]} = "$x" ]]; then
						fo+=($i)
						break
					fi
				done
			done
		fi

		set -A oline
		for x in "${fo[@]}"; do
			oline+=("${line[x]}")
		done
		print -r -- "${oline[@]}"
	done | column -t
}

Ja=1
Nein=0

set -A ages
amin=999
amax=0
asum=0
asqs=0
acnt=0
atot=0

input=$(cat; print .)

set -A revs
[[ -n $veranst_dt ]] && set -A revs -- $(HOME=/nonexistent/really-nonexistent \
    git log --date=iso --pretty=tformat:%H,%cd \
    --author-date-order --reverse -- planung.txt | sed 's/ .*$//')
if (( ${#revs[*]} )); then
	set -A dws
	set -A vst -- $veranst_dt
	set -A vst -- $(mjd_implode 0 0 0 ${vst[2]} $((vst[1] - 1)) $((vst[0] - 1900)))
	last=
	for rev in "${revs[@]}" -; do
		print -nu2 I: Updating statistics... $((++revnum))/${#revs[*]}'\r'
		if [[ $rev = - ]]; then
			set -A ent -- $(timet2mjd $(date +%s))
			cat planung.txt |&
		else
			ent=${rev#*,}
			rev=${rev%,*}
			set -A ent -- ${ent//-/ }
			set -A ent -- $(mjd_implode 0 0 0 ${ent[2]} $((ent[1] - 1)) $((ent[0] - 1900)))
			git show "$rev":./planung.txt |&
		fi
		ent=$(((vst[0] - ent[0]) / 7))
		s=0
		while IFS= read -pr line; do
			case $s:$line {
			(0:+==*)
				s=1
				;;
			(1:*Message-ID*Geschlecht*Klasse*Alter*)
				tbl=$line
				IFS= read -pr line
				tbl+=$nl$line
				s=2
				;;
			(1*)
				s=0
				;;
			(2:'+'*)
				tbl+=$nl$line
				IFS= read -pr line
				IFS= read -pr line
				s=3
				;;
			(2*)
				tbl+=$nl$line
				;;
			}
		done
		if [[ $s != 3 ]]; then
			print -u2 E: Parse error in revision $rev, s=$s
			exit 1
		fi
		this=$(print -r -- "$tbl" | mksh "$mydir/tbl2kdmn" | \
		    x_select Message-ID | while read x msgid; do
			print -r -- "$msgid"
		done | sort)
		comm -3 /dev/fd/4 /dev/fd/5 4<<<"$last" 5<<<"$this" |&
		while IFS= read -pr line; do
			if [[ $line = '	'* ]]; then
				(( dws[ent]++ ))
			else
				(( dws[ent]-- ))
			fi
		done
		last=$this
	done
	set -A ent -- ${!dws[*]}
	ent=${ent[${#ent[*]}-1]}
	(( i = ent ))
	while (( i-- > 0 )); do
		(( dws[i] += dws[i + 1] ))
	done
	s=
	t=
	set -A lengths
	(( i = ent + 1 ))
	while (( i-- > 0 )); do
		(( n = i > dws[i] ? i : dws[i] ))
		lengths[i]=${#n}
		typeset -R${#n} pad=$i
		s+=\ $pad
		typeset -R${#n} pad=${dws[i]:-0}
		t+=\ $pad
	done
	s=$t$'\n'$s
	l=1
	while (( l )); do
		(( i = ent + 1 ))
		l=0 t=
		while (( i-- > 0 )); do
			n=${dws[i]}
			(( l |= n ))
			case $((n)) {
			(0) x=\ ;;
			(1) x=▁ n=0 ;;
			(2) x=▂ n=0 ;;
			(3) x=▃ n=0 ;;
			(4) x=▄ n=0 ;;
			(5) x=▅ n=0 ;;
			(6) x=▆ n=0 ;;
			(7) x=▇ n=0 ;;
			(*) x=█; let n-=8 ;;
			}
			dws[i]=$n
			(( n = lengths[i] + 1 ))
			while (( n-- )); do
				t+=$x
			done
		done
		s=$t$'\n'$s
	done
	print -r -- "$s Wochen vor Veranstaltungsbeginn"
fi

print -nu2 'I: Updating statistics... (age)       \r'
print -nr -- "${input%.}" | x_select Alter | {
	read
	while read x age; do
		(( atot++ ))
		[[ $age = . ]] && continue
		(( ages[$age]++ ))
		(( amin = (amin < age) ? amin : age ))
		(( amax = (amax > age) ? amax : age ))
		(( asum += age ))
		(( asqs += age * age ))
		(( acnt++ ))
	done

	(( amin == 999 )) && print 'Keine Alter bekannt.'
	s=
	t=
	set -A lengths
	(( i = amin - 1 ))
	while (( ++i <= amax )); do
		(( n = i > ages[i] ? i : ages[i] ))
		lengths[i]=${#n}
		typeset -R${#n} pad=$i
		s+=\ $pad
		typeset -R${#n} pad=${ages[i]:-0}
		t+=\ $pad
	done
	s=$t$'\n'$s
	l=1
	while (( l )); do
		(( i = amin - 1 ))
		l=0 t=
		while (( ++i <= amax )); do
			n=${ages[i]}
			(( l |= n ))
			case $((n)) {
			(0) x=\ ;;
			(1) x=▁ n=0 ;;
			(2) x=▂ n=0 ;;
			(3) x=▃ n=0 ;;
			(4) x=▄ n=0 ;;
			(5) x=▅ n=0 ;;
			(6) x=▆ n=0 ;;
			(7) x=▇ n=0 ;;
			(*) x=█; let n-=8 ;;
			}
			ages[i]=$n
			(( n = lengths[i] + 1 ))
			while (( n-- )); do
				t+=$x
			done
		done
		s=$t$'\n'$s
	done
	print -r -- "$s Jahre (Alter der Teilnehmer)"
	if (( amin == 999 )); then
		amin=0
		aavg=0
		asdv=0
	else
		aavg=${|bcfixup 2 "$asum/$acnt";}
		asdv=${|bcfixup 2 "sqrt($asqs / $acnt - ($asum / $acnt) * ($asum / $acnt))";}
	fi
	asamples=$((acnt))
	(( acnt == atot )) || asamples+=" (of $((atot)))"
	print
	print "Minimum:		$((amin))		Maximum:	$((amax))"
	print "Average:		$aavg		Samples:	$asamples"
	print "Standard deviation:	$asdv"
}

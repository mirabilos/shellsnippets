# -*- mode: sh -*-
# From $MirOS: www/mk/common,v 1.13 2025/04/27 03:29:39 tg Exp $
#-
# Copyright © 2007, 2008, 2012, 2013, 2014, 2018, 2021
#	mirabilos <m$(date +%Y)@mirbsd.de>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.
#-
# Time manipulation functions in Pure mksh™ – POSIX, no leap seconds
#
# Example use by the MirOS website: https://www.mirbsd.org/cvs.cgi/www/mk/

# magic from MirOS: src/kern/c/mirtime.c,v 1.6 2021/12/11 20:10:50 tg Exp $

# struct tm members and (POSIX) time functions
typeset -ir tm_sec=0		# seconds [0-59]
typeset -ir tm_min=1		# minutes [0-59]
typeset -ir tm_hour=2		# hours [0-23]
typeset -ir tm_mday=3		# day of month [1-31]
typeset -ir tm_mon=4		# month of year - 1 [0-11]
typeset -ir tm_year=5		# years since 1900
typeset -ir tm_wday=6		# day of week (0 = sunday)	input:ignored
typeset -ir tm_yday=7		# day of year [0-365]		input:ignored
typeset -ir tm_isdst=8		# summer time? [0 no, <0 unk.]	input:ignored
typeset -ir tm_gmtoff=9		# offset from UTC in seconds (0)
typeset -ir tm_zone=10		# abbrev. of timezone ("UTC")	input:ignored

set -A mirtime_months -- Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
set -A mirtime_wdays -- Sun Mon Tue Wed Thu Fri Sat
readonly mirtime_months[*] mirtime_wdays[*]

# $ timet2mjd posix_timet
# ⇒ mjd sec
function timet2mjd {
	local -i10 mjd=$1 sec

	(( sec = mjd % 86400 ))
	(( mjd = (mjd / 86400) + 40587 ))
	while (( sec < 0 )); do
		(( --mjd ))
		(( sec += 86400 ))
	done

	print -- $mjd $sec
}

# $ mjd2timet mjd sec
# ⇒ posix_timet
function mjd2timet {
	local -i10 t=$1 sec=$2

	(( t = (t - 40587) * 86400 + sec ))
	print -- $t
}

# $ mjd_explode mjd sec
# ⇒ tm_sec tm_min tm_hour tm_mday tm_mon tm_year \
#   tm_wday tm_yday "0" "0" "UTC"
function mjd_explode {
	local tm
	set -A tm
	local -i10 sec=$2 day yday mon year=$1

	while (( sec < 0 )); do
		(( --year ))
		(( sec += 86400 ))
	done
	while (( sec >= 86400 )); do
		(( ++year ))
		(( sec -= 86400 ))
	done

	(( day = year % 146097 + 678881 ))
	(( year = 4 * ((year / 146097) + (day / 146097)) ))
	(( day %= 146097 ))
	(( tm[tm_wday] = (day + 3) % 7 ))
	if (( day == 146096 )); then
		(( year += 3 ))
		(( day = 36524 ))
	else
		(( year += day / 36524 ))
		(( day %= 36524 ))
	fi
	(( year = 4 * ((year * 25) + (day / 1461)) ))
	(( day %= 1461 ))
	(( yday = (day < 306) ? 1 : 0 ))
	if (( day == 1460 )); then
		(( year += 3 ))
		(( day = 365 ))
	else
		(( year += day / 365 ))
		(( day %= 365 ))
	fi
	(( yday += day ))
	(( day *= 10 ))
	(( mon = (day + 5) / 306 ))
	(( day = ((day + 5) % 306) / 10 ))
	if (( mon >= 10 )); then
		(( mon -= 10 ))
		(( yday -= 306 ))
		(( ++year ))
	else
		(( mon += 2 ))
		(( yday += 59 ))
	fi
	(( tm[tm_sec] = sec % 60 ))
	(( sec /= 60 ))
	(( tm[tm_min] = sec % 60 ))
	(( tm[tm_hour] = sec / 60 ))
	(( tm[tm_mday] = day + 1 ))
	(( tm[tm_mon] = mon ))
	(( tm[tm_year] = year - 1900 ))
	(( tm[tm_yday] = yday ))
	(( tm[tm_isdst] = 0 ))
	(( tm[tm_gmtoff] = 0 ))
	tm[tm_zone]=UTC

	print -r -- "${tm[@]}"
}

# $ mjd_implode tm_sec tm_min tm_hour tm_mday tm_mon tm_year \
#   ignored ignored ignored tm_gmtoff [ignored]
# ⇒ mjd sec
function mjd_implode {
	local tm
	set -A tm -- "$@"
	local -i10 day x y sec

	(( sec = tm[tm_sec] + 60 * tm[tm_min] + 3600 * tm[tm_hour] - \
	    tm[tm_gmtoff] ))
	(( day = tm[tm_year] + 1900 ))
	(( y = day % 400 ))
	(( day = (day / 400) * 146097 - 678882 + tm[tm_mday] ))
	while (( sec < 0 )); do
		(( --day ))
		(( sec += 86400 ))
	done
	while (( sec >= 86400 )); do
		(( ++day ))
		(( sec -= 86400 ))
	done
	(( x = tm[tm_mon] ))
	while (( x < 0 )); do
		(( --y ))
		(( x += 12 ))
	done
	(( y += x / 12 ))
	(( x %= 12 ))
	if (( x < 2 )); then
		(( x += 10 ))
		(( --y ))
	else
		(( x -= 2 ))
	fi
	(( day += (306 * x + 5) / 10 ))
	while (( y < 0 )); do
		(( day -= 146097 ))
		(( y += 400 ))
	done
	(( day += 146097 * (y / 400) ))
	(( y %= 400 ))
	(( day += 365 * (y % 4) ))
	(( y /= 4 ))
	(( day += 1461 * (y % 25) + 36524 * (y / 25) ))

	print -- $day $sec
}

# convenience function to check (German) date input (no time-of-day)
# input is $2, MJD is written to $$1, normalised date to $$3 if $3 is set
function dtchk {
	local tm mjd x saveIFS r iso=1 to
	set -A tm
	set -A mjd
	set -A x
	local -i10 -Z2 ra rb rc
	local -i10 -Z4 ry

	errstr="'$2' not in YYYY-MM-DD (ISO 8601) or DD.MM.YYYY (obsolete German) format"
	if [[ $2 = +([0-9]).+([0-9]).+([0-9]) ]]; then
		iso=0
	elif [[ $2 != +([0-9])-+([0-9])-+([0-9]) ]]; then
		return 1
	fi
	saveIFS=$IFS
	IFS=.-
	set -A x -- $2
	IFS=$saveIFS
	set -A tm -- 0 0 0 $((x[2])) $((x[1] - 1)) $((x[0] - 1900)) - - - 0 -

	if (( !iso )); then
		tm[3]=$((x[0]))
		tm[5]=$((x[2] - 1900))
	fi

	set -A mjd -- $(mjd_implode "${tm[@]}")
	set -A x -- $(mjd_explode "${mjd[0]}" 0)

	(( ra = x[3] ))
	(( rb = x[4] + 1 ))
	(( ry = x[5] + 1900 ))
	if (( iso )); then
		to=$ry-$rb-$ra
	else
		to=$ra.$rb.$ry
	fi

	(( ra = x[2] ))
	(( rb = x[1] ))
	(( rc = x[0] ))

	errstr="invalid date $2, normalises to $to $ra:$rb:$rc"
	[[ ${tm[0]} = ${x[0]} ]] || return 1
	[[ ${tm[1]} = ${x[1]} ]] || return 1
	[[ ${tm[2]} = ${x[2]} ]] || return 1
	errstr="bogus date $2, normalises to $to"
	[[ ${tm[3]} = ${x[3]} ]] || return 1
	[[ ${tm[4]} = ${x[4]} ]] || return 1
	[[ ${tm[5]} = ${x[5]} ]] || return 1
	errstr=
	nameref r=$1
	r=${mjd[0]}
	if [[ -n $3 ]]; then
		nameref rr=$3
		rr=$to
	fi
	return 0
}

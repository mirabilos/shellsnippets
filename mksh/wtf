#!/bin/mksh
myver='$MirOS: src/usr.bin/wtf/wtf,v 1.44 2020/06/06 23:44:34 tg Exp $'
# $NetBSD: wtf,v 1.7 2000/11/21 00:18:52 soren Exp $
#-
# Copyright © 2002, 2003, 2004, 2006, 2007, 2008, 2010, 2011,
#	      2012, 2014, 2015, 2017, 2019, 2020
#	mirabilos <m@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.

export LC_ALL=C.UTF-8 POSIXLY_CORRECT=1
unset LANGUAGE GREP_OPTIONS GREP_COLOR GREP_COLORS

acronyms=${ACRONYMDB:-/usr/share/misc/acronyms}

usage() {
	print -u2 "usage: ${0##*/} [±AadKkPpwy] [-f dbfile] [is[t]] <acronym> [...]"
	exit 1
}

# easier with nameref, but we support older mksh
function apush {
	eval "$1[n$1++]=\$2"
}

use_acronyms=-1
use_dict=-1
use_mank=-1
use_ports=-1
use_whatis=-1
use_why=-1
hasopt=0
show_ver=0
while getopts "Aadf:hKkPpt:Vwy" ch; do
	case $ch {
	(+A)	hasopt=1 use_acronyms=0 use_dict=0 use_mank=0
		use_ports=0 use_whatis=0 use_why=0 ;;
	(A)	hasopt=1 use_acronyms=1 use_dict=2 use_mank=2
		use_ports=2 use_whatis=1 use_why=1 ;;
	(+a)	hasopt=1 use_acronyms=0 ;;
	(a)	hasopt=1 use_acronyms=1 ;;
	(+d)	hasopt=1 use_dict=0 ;;
	(d)	hasopt=1 use_dict=1 ;;
	(f)	acronyms=$OPTARG ;;
	(+K)	hasopt=1 use_mank=0 ;;
	(K)	hasopt=1 use_mank=2 ;;
	(+k)	hasopt=1 use_mank=0 ;;
	(k)	hasopt=1 use_mank=1 ;;
	(+P)	hasopt=1 use_ports=0 ;;
	(P)	hasopt=1 use_ports=2 ;;
	(+p)	hasopt=1 use_ports=0 ;;
	(p)	hasopt=1 use_ports=1 ;;
	(t)	;;
	(V)	show_ver=1 ;;
	(+w)	hasopt=1 use_whatis=0 ;;
	(w)	hasopt=1 use_whatis=1 ;;
	(+y)	hasopt=1 use_why=0 ;;
	(y)	hasopt=1 use_why=1 ;;
	(*)	usage ;;
	}
done
shift $((OPTIND - 1))

if (( hasopt )); then
	(( use_acronyms = (use_acronyms == -1) ? 0 : use_acronyms ))
	(( use_dict = (use_dict == -1) ? 0 : use_dict ))
	(( use_mank = (use_mank == -1) ? 0 : use_mank ))
	(( use_ports = (use_ports == -1) ? 0 : use_ports ))
	(( use_whatis = (use_whatis == -1) ? 0 : use_whatis ))
	(( use_why = (use_why == -1) ? 0 : use_why ))
else
	use_acronyms=1
	use_dict=0
	use_ports=0
	use_mank=0
	use_whatis=0
	use_why=0
fi

if (( show_ver )); then
	print -ru2 -- "$myver"
	if (( use_acronyms )); then
		exec <"$acronyms"
		if ! IFS= read -r line || [[ $line != '  '* ]] || \
		    ! IFS= read -r line || [[ $line != ' @(#)'* ]]; then
			print -ru2 "E: acronyms database ${acronyms@Q} too old"
			exit 1
		fi
		print -ru2 -- "${line# ????}"
		print -nu2 'Counting, please be patient…'
		last= nacr=0 nexp=0 lots=${EPOCHREALTIME%?????}
		while IFS= read -r line; do
			[[ $line = *'	'* ]] || continue
			let ++nexp
			line=${line%%	*}
			[[ $line = "$last" ]] || let ++nacr
			last=$line
			[[ $lots = ${EPOCHREALTIME%?????} ]] && continue
			print -nu2 \\rwtf knows at least $nacr acronyms with $nexp expansions
			lots=${EPOCHREALTIME%?????}
		done
		print -u2 \\rwtf currently knows about $nacr acronyms with $nexp expansions
	fi
	exit 0
fi

(( $# > 1 )) && [[ $1 = is?(t) ]] && shift
(( $# < 1 )) && usage

if (( use_ports )); then
	if [[ -s /usr/ports/INDEX ]]; then
		# MirPorts Framework, OpenBSD ports tree
		binpkgs=ports
		function ports_acquire_filtered {
			local a b c d e
			local -l x y=$1

			while IFS='|' read a b c d e; do
				x=$a
				[[ $x = *"$y"* ]] && \
				    print -r -- "$a|${d%% \(uses*}"
			done </usr/ports/INDEX
		}
		function ports_acquire_unfiltered {
			local a b c d e
			local -l x y=$1

			while IFS='|' read a b c d e; do
				x=$a$d
				[[ $x = *"$y"* ]] && \
				    print -r -- "$a|${d%% \(uses*}"
			done </usr/ports/INDEX
		}
	elif command -v yum >/dev/null; then
		# Red Hat Yellowdog Updater Modified
		binpkgs=RPMs
		function ports_acquire_filtered {
			local -l x y=$1

			yum search -q -- "$1" | \
			    tr '\n' '' | sed 's/ *: / /g' | tr '' '\n' | \
			    while read a b c; do
				x=$a
				[[ $x = *"$y"* ]] && print -r -- "$a|$c"
			done
		}
		function ports_acquire_unfiltered {
			yum search -q -- "$1" | \
			    tr '\n' '' | sed 's/ *: / /g' | tr '' '\n' | \
			    while read a b c; do
				print -r -- "$a|$c"
			done
		}
	elif command -v apt-cache >/dev/null; then
		# Debian Advanced Packaging Tool
		binpkgs=packages
		function ports_acquire_filtered {
			local -l x y=$1

			apt-cache search -- "$1" | while read a b c; do
				x=$a
				[[ $x = *"$y"* ]] && print -r -- "$a|$c"
			done
		}
		function ports_acquire_unfiltered {
			apt-cache search -- "$1" | while read a b c; do
				print -r -- "$a|$c"
			done
		}
	else
		use_ports=0
	fi
	case $use_ports {
	(1)	alias ports_acquire=ports_acquire_filtered
		pkgmatch='basename' ;;
	(2)	alias ports_acquire=ports_acquire_unfiltered
		pkgmatch='name or description' ;;
	(*)	use_ports=0 ;;
	}
fi

function mank_acquire_filtered {
	local -l x y=$1

	man -k -- "$1" | while IFS= read -r line; do
		x=${line%%')'*}
		[[ $x = *"$y"* ]] && print -r -- "$line"
	done
}
function mank_acquire_unfiltered {
	man -k -- "$1"
}
function mansort {
	local l a b c
	local -L24 x

	while IFS= read -r l; do
		if [[ $l != +([!\(\)])'('+([!\)])')'*([	 ])'-'* ]]; then
			print -r -- "~$l"
			continue
		fi
		a=${l%%')'*}
		c=${l#*')'}
		c=${c##*([	 ])-*([	 ])}
		b=${a##*'('}
		a=${a%'('*}
		a=${a%%*([	 ])}
		a="$a ($b)"
		x=$a
		if [[ $x = "$a"+( ) ]]; then
			a=$x
		else
			a+=' '
		fi
		print -r -- " ${b}${a}- $c"
	done | sort -u | sed 's/^[^]*//'
}
case $use_mank {
(1)	alias mank_acquire=mank_acquire_filtered
	manmatch='manpage name or alias' ;;
(2)	alias mank_acquire=mank_acquire_unfiltered
	manmatch='names or description' ;;
(*)	use_mank=0 ;;
}

if (( use_why )); then
	if command -v dpkg-query >/dev/null; then
		# Debian packages
		function do_why {
			set -o noglob
			local pkgname n pre dep rec sug enh
			local DEP REC SUG ENH
			local -i nDEP nREC nSUG nENH

			for pkgname in $(dpkg-query -W \
			    --showformat='${Package}\n' "$@" | \
			    sed 's/:.*$//' | sort -u); do
				set -A DEP; nDEP=0
				set -A REC; nREC=0
				set -A SUG; nSUG=0
				set -A ENH; nENH=0
				dpkg-query -W --showformat='${Package}${Pre-Depends}${Depends}${Recommends}${Suggests}\n' | \
				    grep -Fw -- "$pkgname" | \
				    sed -e 's/ //g' -e 's/([^)]*)//g' | \
				    sort -u |&
				while IFS='' read -pr n pre dep rec sug; do
					do_why1r "$pkgname" "$n" DEP "$pre"
					do_why1r "$pkgname" "$n" DEP "$dep"
					do_why1r "$pkgname" "$n" REC "$rec"
					do_why1r "$pkgname" "$n" SUG "$sug"
				done
				for enh in $(dpkg-query -W \
				    --showformat='${Enhances}\n' "$pkgname" | \
				    sed -e 's/ //g' -e 's/([^)]*)//g' | \
				    tr ',|' '\n\n' | sort -u); do
					apush ENH "${enh%%':'*} ="
				done
				n=
				(( nDEP )) && do_why1p "$pkgname" Dependencies on "${DEP[@]}"
				(( nREC )) && do_why1p "$pkgname" Recommends on "${REC[@]}"
				(( nSUG )) && do_why1p "$pkgname" Suggests on "${SUG[@]}"
				(( nENH )) && do_why1p "$pkgname" Enhanced by "${ENH[@]}"
			done
			set +o noglob  # for old mksh versions
		}
		function do_why1r {
			local f x y z

			IFS=,
			set -A y -- $4
			IFS=$' \t\n'
			for x in "${y[@]}"; do
				if [[ $x = *'|'* ]]; then
					IFS='|'
					set -A z -- $x
					IFS=$' \t\n'
					f=0
					for x in "${z[@]}"; do
						if [[ ${x%%':'*} = "$1" ]]; then
							(( f |= 1 ))
						else
							(( f |= 2 ))
						fi
					done
					if (( f == 3 )); then
						apush "$3" "${2%%':'*} |"
						return
					elif (( f == 1 )); then
						apush "$3" "${2%%':'*} ="
						return
					fi
				elif [[ ${x%%':'*} = "$1" ]]; then
					apush "$3" "${2%%':'*} ="
					return
				fi
			done
		}
		function do_why_pkgfmt {
			print -r -- "$2$(dpkg-query -W "$1" | tr '\n'  | sed \
			    -e 's/\t\([^]*\)/ (= \1), /g' \
			    -e 's/ (= )/ [no version]/g' \
			    -e 's/, $//')$3"
		}
		function do_why1p {
			local h=$(do_why_pkgfmt "$1" "  - $2 $3 “" "”:")$'\n'
			shift 3
			local x y z

			for x in "$@"; do
				print -r -- "$x"
			done | sort -u |&
			while IFS= read -pr y; do
				z=${y:(-1)}
				y=${y% ?}
				# checks for doublettes; order important:
				# - dep before rec before sug before enh
				# - ‘=’ before ‘|’
				[[ $n = *"${y}"* ]] && continue
				n+="${y}"
				[[ $z = '|' ]] || z=' '
				do_why_pkgfmt "$y" "$h$z"
				h=
			done
		}
	else
		use_why=0
	fi
fi

if (( use_acronyms )); then
	# read case-folding code
	if ! IFS= read -r line <"$acronyms" || [[ $line != '  '* ]]; then
		print -ru2 "E: acronyms database ${acronyms@Q} too old"
		exit 1
	fi
	set -A ucsrch -- $line

	# create sorted input array, uppercased/folded
	s='set -sA stsrch --'
	i=0
	# now: "$@"=("$0" foo bar baz)
	for target in "$@"; do
		typeset -u tgsrch=$target
		[[ $tgsrch = *[A-Z].* || $tgsrch = .*[!.-]* ]] && \
		    tgsrch=${tgsrch//.}
		for p in "${ucsrch[@]}"; do
			eval 'tgsrch=${tgsrch//'"$p}"
		done
		s+=" ${tgsrch@Q}=$((++i))"
	done
	eval "$s"
	# now: stsrch=(BAR=2 BAZ=3 FOO=1)

	# create output mapping, remove mapping number from stsrch
	set -A omsrch
	tgsrch=
	i=0 n=-1
	for s in "${stsrch[@]}"; do
		p=${s%=*}
		if [[ $p = $tgsrch ]]; then
			# this is a repeat
			unset stsrch[i++]
		else
			stsrch[i++]=$p
			tgsrch=$p
			let ++n
		fi
		(( omsrch[${s##*=}] = n ))
	done
	set -A stsrch -- "${stsrch[@]}"
	# now: stsrch=(BAR BAZ FOO) omsrch[1]=2 omsrch[2]=0 omsrch[3]=1

	# shorten search time
	set -A grepcmd
	i=-1
	for s in "${stsrch[@]}"; do
		grepcmd[++i]=-e
		grepcmd[++i]=${s@/[\\.\[\^\$\*]/\\$KSH_MATCH}$'\t'
	done
	grep "${grepcmd[@]}" <"$acronyms" |&
	unset grepcmd

	# look up acronyms
	set -A acrout
	i=-1
	for s in "${stsrch[@]}"; do
		let ++i
		while :; do
			if [[ $line = "$s	"* ]]; then
				acrout[i]+=$'\n'${line#*	}
			elif [[ $line > "$s	" ]]; then
				continue 2
			fi
			if ! IFS= read -pr line; then
				i=-1
				break 2
			fi
		done
	done
	# avoid SIGPIPE
	(( i == -1 )) || read -prN-1 line
	line=

	i=0
fi

rv=0
for target in "$@"; do
	if (( use_ports )); then
		p=$(ports_acquire "$target")
		if [[ -n $p ]]; then
			print -r "  - $binpkgs matching “$target” in $pkgmatch:"
			print -r -- "$p" | sort -u | column -ts'|'
		fi
	fi

	(( use_why )) && do_why "$target"

	if (( use_mank )); then
		p=$(mank_acquire "$target")
		if [[ -n $p ]]; then
			print -r "  - manual pages matching “$target” in $manmatch:"
			print -r -- "$p" | mansort
		fi
	fi

	if (( use_acronyms )); then
		n=${omsrch[++i]}
		s=${acrout[n]}
		tgsrch=${stsrch[n]}
		if [[ -n $s ]]; then
			print -r -- "   $tgsrch:$s"
		else
			print -ru2 Gee… I don’t know what “"$tgsrch"” means…
			(( rv |= 1 ))
		fi
	fi

	(( use_dict || use_whatis )) && print "  - other information sources"

	(( use_dict )) && if command -v dict >/dev/null; then
		dict -- "$target" || (( rv |= 2 ))
	else
		(( use_dict == 2 )) || (( rv |= 4 ))
		(( use_whatis )) || print -r "Oops, no dict client found."
	fi

	if (( use_whatis )); then
		w=$(man -f -- "$target" | mansort) || \
		    w="Oops, no manual page found for “$target”."
		print -r -- "$w"
	fi
done
exit $rv

#!/bin/mksh
# -*- mode: sh -*-
#-
# Copyright © 2022
#	mirabilos <m$(date +%Y)@mirbsd.de>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.
#-
# Calculates solstice and æquinōx days via the JPL Horizons API, and
# the old quarter days using the golden ratio approach documented by
# http://web.archive.org/web/20170628085124/http://www.astrothek.de/artikel/jahreskreis/jahreskreis_termine.html
#
# The service http://aa.usno.navy.mil/data/docs/EarthSeasons.php had
# (though at less precision) the former but was discontinued.
#
# Output is in BSD calendar(1) format.

unset LANGUAGE
export LC_ALL=C POSIXLY_CORRECT=1
set -ex
: upgrade your mksh should this fail:
set -o noglob -o pipefail +x

myver=1.1
apibase='https://ssd.jpl.nasa.gov/api/horizons.api'
apirq="$apibase?format=json&COMMAND='10'&OBJ_DATA=NO&MAKE_EPHEM=YES&EPHEM_TYPE=OBSERVER&CENTER=500@399&QUANTITIES='2'&REF_SYSTEM=ICRF&CAL_FORMAT=BOTH&ANG_FORMAT=DEG&APPARENT=AIRLESS&TIME_DIGITS=FRACSEC&EXTRA_PREC=YES&CSV_FORMAT=YES"

function die {
	print -ru2 -- "E: $1"
	shift
	for x in "$@"; do
		print -ru2 -- "N: $x"
	done
	exit 1
}

function warn {
	print -ru2 -- "W: $1"
	shift
	for x in "$@"; do
		print -ru2 -- "N: $x"
	done
}

function testforlocaloptions {
	set +e
}
testforlocaloptions
[[ -o errexit ]] || die 'mksh too old'

myua="earthseasons/$myver +https://github.com/mirabilos/shellsnippets/blob/master/mksh/earthseasons"
cd $(realpath "$0/..") || die 'cannot change to script directory'
test -d earthseasons.cache || mkdir earthseasons.cache || die 'cannot make cache directory'

if curl --fail-with-body file:/// >/dev/null 2>&1; then
	curlparms='--fail-with-body -sSL'
elif curl -f file:/// >/dev/null 2>&1; then
	curlparms='-fsSL'
else
	die 'cURL failed function test'
fi
curlver=$(curl --version 2>/dev/null | sed -ne '2,$d' -e '/^curl /s!!curl/!p') || curlver=
[[ -n $curlver ]] || die 'cannot obtain cURL version'

caching_didonerequest=false
function caching_request {
	local cachekey=$1 rv altreply
	shift
	set +e

	[[ cachekey != [.\~]* ]] || cachekey="+$cachekey"
	REPLY=earthseasons.cache/$cachekey
	altreply=earthseasons.cache/'~'$cachekey

	if [[ -s earthseasons.cache/$cachekey ]]; then
		print -ru2 "I: cached $cachekey"
		return 0
	fi

	[[ ! -e $altreply ]] || rm "$altreply" || \
	    die 'cannot remove old reply' "$altreply"
	print -ru2 "I: requesting $cachekey"
	# rate limiting
	if $caching_didonerequest; then
		sleep 1
	else
		caching_didonerequest=true
	fi
	curl $curlparms -A "$myua using $curlver" "$@" >"$altreply"
	rv=$?
	if (( rv == 0 )); then
		mv "$altreply" "$REPLY" || \
		    die 'renaming cURL result' "$altreply"
		return 0
	fi
	REPLY=$altreply
	return $rv
}

function api_request {
	local parm parms rs rv x

	while (( $# )); do
		parm=${2//'%'/%25}
		parm=${parm//';'/%3B}
		parm=${parm//'/'/%2F}
		parm=${parm//'?'/%3F}
#		parm=${parm//':'/%3A}
		parm=${parm//'@'/%40}
		parm=${parm//'&'/%26}
		parm=${parm//'='/%3D}
		parm=${parm//'+'/%2B}
		parm=${parm//'$'/%24}
		parm=${parm//','/%2C}
		parm=${parm//$'\t'/%09}
		parm=${parm//' '/%20}
		parm=${parm//'<'/%3C}
		parm=${parm//'>'/%3E}
		parm=${parm//'#'/%23}
		parm=${parm//'"'/%22}
		parm=${parm//'{'/%7B}
		parm=${parm//'}'/%7D}
		parm=${parm//'|'/%7C}
		parm=${parm//\\/%5C}
		parm=${parm//'^'/%5E}
		parm=${parm//'['/%5B}
		parm=${parm//']'/%5D}
		parm=${parm//'`'/%60}
		parm=${parm//\'/%27}
		parm=${parm//$'\n'/%0A}
		parms+="&$1=$parm"
		shift 2
	done

	set +e
	caching_request "$parms" "$apirq$parms"
	rv=$?
	rs=$REPLY
	(( rv == 0 )) || return $rv

	x=$(<"$rs" jq -r .code) || die 'API result is not JSON' "$parms" "$rs"
	if [[ $x != null ]]; then
		warn "API result error code $x"
		return 254
	fi
	x=$(<"$rs" jq -r .error) || die 'API result is not JSON' "$parms" "$rs"
	if [[ $x != null ]]; then
		warn "API result error string: $x"
		return 254
	fi
	# unpack
	REPLY=earthseasons.cache/.$parms
	<"$rs" jq -r .result >"$REPLY" || \
	    die 'API result unpacking error' "$parms" "$rs"
}

function api_response {
	local rv

	set +e
	api_request "$@"
	rv=$?
	(( rv )) || return 0

	if jq . <"$REPLY" >/dev/null; then
		jq . <"$REPLY" || cat "$REPLY"
	else
		cat "$REPLY"
	fi | sed 's/^/N: /'
	die 'API request failed' "$REPLY"
}

function doapi {
	api_response \
	    START_TIME "'${tbeg%.[05]00}'" \
	    STOP_TIME "'${tend%.[05]00}'" \
	    STEP_SIZE "'$step'"
}

function parse_table {
	nameref dts=${1}ts dec=${1}dec dea=${1}deca dra=${1}ra nd=${1}n
	local src=$2 tarr line
	set -A dts
	set -A dec
	nd=0

	lastparsed=$1
	lastparsedfn=$src

	exec <"$src"
	while IFS= read -r line; do
		[[ $line != '$$SOE' ]] || break
	done
	[[ $line = '$$SOE' ]] || die 'missing table start marker' "$src"
	while IFS=, read -rA tarr; do
		[[ ${tarr[0]} != '$$EOE' ]] || return 0
		line=${tarr[4]%%+( )}
		dra[nd]=${line##+( )}
		[[ ${dra[nd]} = @(3[0-5][0-9]|[12][0-9][0-9]|?([1-9])[0-9]).[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] ]] || \
		    die 'RA not in expected format' "$src" "${tarr[@]}"
		while [[ ${dra[nd]} != ???.* ]]; do
			dra[nd]=0${dra[nd]}
		done
		line=${tarr[5]%%+( )}
		dec[nd]=${line##+( )}
		[[ ${dec[nd]} = ?(-)?([0-2])[0-9].[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] ]] || \
		    die 'DEC not in expected format' "$src" "${tarr[@]}"
		dea[nd]=${dec[nd]#-}
		[[ ${dea[nd]} = ??.* ]] || dea[nd]=0${dea[nd]}
		line=${tarr[0]%%+( )}
		IFS=' -'
		set -- ${line##+( )}
		IFS=$' \t\n'
		case $2 {
		(Jan) line=01 ;;
		(Feb) line=02 ;;
		(Mar) line=03 ;;
		(Apr) line=04 ;;
		(May) line=05 ;;
		(Jun) line=06 ;;
		(Jul) line=07 ;;
		(Aug) line=08 ;;
		(Sep) line=09 ;;
		(Oct) line=10 ;;
		(Nov) line=11 ;;
		(Dec) line=12 ;;
		(*) die 'unparsable month' "$src" "${tarr[@]}" ;;
		}
		[[ $1 = $y || $1 = $z ]] || die 'bad year' "$src" "${tarr[@]}"
		[[ $3 = @(0[1-9]|[12][0-9]|3[01]) ]] || \
		    die 'bad day of month' "$src" "${tarr[@]}"
		# note leap seconds cannot occur in the queries we give
		# resolution is ½ second
		[[ $4 = @([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].[05]00 ]] || \
		    die 'bad time' "$src" "${tarr[@]}"
		dts[nd++]="$1-$line-$3 $4"
	done
	die 'missing table end marker' "$src"
}

function flipwsw {
	[[ ! $1 < 270. ]]
}
function flipftn {
	[[ $1 = 0* ]]
}
function flipssw {
	[[ ! $1 < 090. ]]
}
function fliphtn {
	[[ ! $1 < 180. ]]
}

function flipsmh {
	[[ ! $1 < $vdecwh ]]
}
function flipimb {
	[[ $1 < $vdecwh ]]
}
function flipblt {
	[[ ! $1 < $vdecsh ]]
}
function fliplgh {
	[[ $1 < $vdecsh ]]
}

(( $# == 1 )) || die "Syntax: $0 year"
[[ $1 == @(19[789][0-9]|2[0-9][0-9][0-9]) ]] || die "not a year: $1"
y=$1
z=$((y + 1))

tbeg="${y}-10-01 00:00:00"
tend="${z}-10-01 00:00:00"
step=365
if (( (z % 4) == 0 && ((z % 100) != 0 || (z % 400) == 0) )); then
	step=366
fi
yearf=${|doapi;}
parse_table year "$yearf"

function dumpx {
	local title=$1 key=$2 fn=$3
	nameref ts=${key}ts dec=${key}dec deca=${key}deca ra=${key}ra n=${key}n

	print -ru2 -- "I: $title $key file $fn"
	print -ru2 -- "N: i	ts			RA		DEC		DEC absolute"
	i=-1
	while (( ++i < n )); do
		print -ru2 -- "N: $i	${ts[i]}	${ra[i]}	${dec[i]}	${deca[i]}"
	done
}

function ddie {
	dumpx lastparsed "$lastparsed" "$lastparsedfn"
	die "$@"
}

# find DECmin, DECmax
DECmin=err
DECmax=err
i=0
while (( ++i < yearn )); do
	if [[ ${yeardeca[i]} < ${yeardeca[i - 1]} ]]; then
		DECmin=$i
		break
	fi
done
while (( i < yearn )) && [[ ${yeardec[++i]} = -* ]]; do
	: nothing
done
while (( ++i < yearn )); do
	if [[ ${yeardeca[i]} < ${yeardeca[i - 1]} ]]; then
		DECmax=$i
		break
	fi
done
while (( i < yearn )) && [[ ${yeardec[++i]} != -* ]]; do
	: nothing
done
if (( i >= yearn )) || [[ $DECmin = err || $DECmax = err ]]; then
	ddie 'year data format error' \
	    "DECmin=$DECmin" "DECmax=$DECmax"
fi
# find RAwsw, RAftn, RAssw, RAhtn
RAwsw= RAftn= RAssw= RAhtn=
i=-1
while (( ++i < yearn )); do
	if flipwsw "${yearra[i]}"; then
		RAwsw=$i
		break
	fi
done
while (( ++i < yearn )); do
	if flipftn "${yearra[i]}"; then
		RAftn=$i
		break
	fi
done
while (( ++i < yearn )); do
	if flipssw "${yearra[i]}"; then
		RAssw=$i
		break
	fi
done
while (( ++i < yearn )); do
	if fliphtn "${yearra[i]}"; then
		RAhtn=$i
		break
	fi
done
if (( i >= yearn )) || [[ -z $RAwsw || -z $RAftn || -z $RAssw || -z $RAhtn ]]; then
	ddie 'year data format error' \
	    "RAwsw=$RAwsw" "RAftn=$RAftn" \
	    "RAssw=$RAssw" "RAhtn=$RAhtn"
fi

function dominmax {
	nameref dec=DEC$1
	local i j k

	(( dec >= 2 )) || ddie huh? "$yearf"	# cannot happen

	tbeg=${yearts[dec - 2]}
	tend=${yearts[dec]}
	step=1200
	nameref f=${1}fcoarse n=c${1}n
	f=${|doapi;}
	parse_table c$1 "$f"
	nameref n=c${1}n ts=c${1}ts dec=c${1}dec deca=c${1}deca

	i=0
	while (( ++i < n )); do
		if [[ ${deca[i]} < ${deca[i - 1]} ]]; then
			break
		fi
	done
	# note that i < 2 cannot happen because deca[dec-1] > deca[dec-2]
	(( i >= 2 )) || ddie huh? "$f"
	(( i < n )) || ddie "cannot determine coarse $1 ranges"

	tbeg=${ts[i - 2]}
	tend=${ts[i]}
	step=576
	nameref f=${1}ffine n=f${1}n
	f=${|doapi;}
	parse_table f$1 "$f"
	nameref n=f${1}n ts=f${1}ts dec=f${1}dec deca=f${1}deca

	i=0
	while (( ++i < n )); do
		if [[ ${deca[i]} < ${deca[i - 1]} ]]; then
			break
		fi
	done
	(( i < n )) || ddie "cannot determine fine $1 range upper end"
	nameref val=vdec$1
	val=${dec[i - 1]}

	j=-1
	while (( ++j < i )); do
		if [[ ${dec[j]} = $val ]]; then
			break
		fi
	done
	if (( j == 0 )); then
		nameref f=${1}fcoarse
		dumpx coarse c$1 "$f"
		ddie "cannot determine fine $1 range lower end"
	fi
	(( j < i )) || ddie huh? "$f" "j=$j i=$i n=$n val=$val"

	# determine median element (j is first $val, i is first after)
	(( (k = (i - j) / 2 + j), 1 ))
	nameref vts=vts$1
	vts=${ts[k]}
}

function doraflip {
	nameref ra=RA$1
	local i

	(( ra >= 1 )) || ddie huh? "$yearf"	# cannot happen

	tbeg=${yearts[ra - 1]}
	tend=${yearts[ra]}
	step=480
	nameref f=${1}fcoarse n=c${1}n
	f=${|doapi;}
	parse_table c$1 "$f"
	nameref n=c${1}n ts=c${1}ts ra=c${1}ra

	i=-1
	while (( ++i < n )); do
		if flip$1 "${ra[i]}"; then
			break
		fi
	done
	(( i >= 1 )) || ddie huh? "$f"	# cannot happen
	(( i < n )) || ddie "cannot determine coarse $1 ranges"

	tbeg=${ts[i - 1]}
	tend=${ts[i]}
	step=360
	nameref f=${1}ffine n=f${1}n
	f=${|doapi;}
	parse_table f$1 "$f"
	nameref n=f${1}n ts=f${1}ts ra=f${1}ra

	i=-1
	while (( ++i < n )); do
		if flip$1 "${ra[i]}"; then
			break
		fi
	done
	(( i < n )) || ddie "cannot determine fine $1 flip point"
	nameref vts=vts$1
	vts=${ts[i]}
}

function doquarter {
	nameref dec=DEC$1
	local i

	(( dec >= 1 )) || ddie huh? "$yearf"	# cannot happen

	tbeg=${yearts[dec - 1]}
	tend=${yearts[dec]}
	step=480
	nameref f=${1}fcoarse n=c${1}n
	f=${|doapi;}
	parse_table c$1 "$f"
	nameref n=c${1}n ts=c${1}ts deca=c${1}deca

	i=-1
	while (( ++i < n )); do
		if flip$1 "${deca[i]}"; then
			break
		fi
	done
	(( i >= 1 )) || ddie huh? "$f"	# cannot happen
	(( i < n )) || ddie "cannot determine coarse $1 ranges"

	tbeg=${ts[i - 1]}
	tend=${ts[i]}
	step=360
	nameref f=${1}ffine n=f${1}n
	f=${|doapi;}
	parse_table f$1 "$f"
	nameref n=f${1}n ts=f${1}ts deca=f${1}deca

	i=-1
	while (( ++i < n )); do
		if flip$1 "${deca[i]}"; then
			break
		fi
	done
	(( i < n )) || ddie "cannot determine fine $1 flip point"
	nameref vts=vts$1
	vts=${ts[i]}
}

dominmax min
dominmax max
doraflip wsw
doraflip ftn
doraflip ssw
doraflip htn

# calculate declination for quarter days from golden ratio
bc <<-EOF |&
	define v(x) {
		if (x < 0) return (-1)
		if (x > 0) return (1)
		return (0)
	}
	define r(x,n) {
		auto o
		o = scale
		if (scale < (n + 1)) scale = (n + 1);
		x += v(x) * 0.5 * A^-n
		scale = n
		x /= 1
		scale = o
		return (x)
	}
	scale=240
	a=$vdecmin
	b=$vdecmax
	r(a/((1+sqrt(5))/2),9)
	r(b/((1+sqrt(5))/2),9)
	42
EOF
set -A bcres --
nbcres=0
while IFS= read -pr line; do
	bcres[nbcres++]=$line
done
if [[ $nbcres != 3 || ${bcres[2]} != 42 || \
    ${bcres[0]} != -14.[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] || \
    ${bcres[1]} != 14.[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] ]]; then
	die "weird $nbcres bc results" "${bcres[@]}"
fi
vdecwh=${bcres[0]#-}
vdecsh=${bcres[1]}

# find DECsmh, DECimb, DECblt, DEClgh
DECsmh= DECimb= DECblt= DEClgh=
i=-1
while (( ++i < yearn )); do
	if flipsmh "${yeardeca[i]}"; then
		DECsmh=$i
		break
	fi
done
while (( ++i < yearn )); do
	if flipimb "${yeardeca[i]}"; then
		DECimb=$i
		break
	fi
done
while (( ++i < yearn )); do
	if flipblt "${yeardeca[i]}"; then
		DECblt=$i
		break
	fi
done
while (( ++i < yearn )); do
	if fliplgh "${yeardeca[i]}"; then
		DEClgh=$i
		break
	fi
done
if (( i >= yearn )) || [[ -z $DECsmh || -z $DECimb || -z $DECblt || -z $DEClgh ]]; then
	lastparsed=year
	lastparsedfn="$yearf"
	ddie 'year data format error' \
	    "DECsmh=$DECsmh" "DECimb=$DECimb" \
	    "DECblt=$DECblt" "DEClgh=$DEClgh"
fi

doquarter smh "$vdecwh"
doquarter imb "$vdecwh"
doquarter blt "$vdecsh"
doquarter lgh "$vdecsh"

function doout {
	local label=$2

	IFS='- :.'
	set -- $1
	IFS=$' \t\n'
	local y=$1 m=$2 d=$3 H=$4 M=$5 S=$6 ss=$7

	if [[ $ss = 500 ]]; then
		ss='.5'
	elif [[ $ss = 000 ]]; then
		ss='  '
	else
		ss=.$ss
		warn "bad fractional second part? $ss" "$label"
	fi

	print -r -- "$m-$d*	$y, $H:$M[UTC] $H:$M:$S$ss $label"
}

print -r -- '/* {{{ generated */'
print -r -- "/*     by $myua */"
doout "$vtssmh" 'Samhain (All-Hallowe’en, Ilgės/Apkūlības), solar/golden ratio'
doout "$vtswsw" 'Jul (Wintersonnenwende, Mittwinter, longest-night, Saturnalia, schab-e Yaldā, 冬至, Kūķu)'
doout "$vtsimb" 'Imbolc (Brighid, Lichtmeß, Oimelc, Lupercalia, Meteņi), solar/golden ratio'
doout "$vtsftn" 'Ēostre/Ôstara (Frühjahrstagundnachtgleiche, Nouruz, Hilaria, Lieldienas)'
doout "$vtsblt" 'Beltaine (Walpurgis, Floralia, Jorė/Ūsiņi), solar/golden ratio'
doout "$vtsssw" 'Litha (Sommersonnenwende, Mittsommer, shortest-night, Joninės/Jāņi)'
doout "$vtslgh" 'Lughnasadh (Schnitterfest, Kräuterweih, Lammas, Māras), solar/golden ratio'
doout "$vtshtn" 'Mabon (Herbsttagundnachtgleiche, harvest festival, Apjumības)'
print -r -- '/* }}} generated */'
print
print -r -- '/* {{{ generated for the southern hemisphere */'
doout "$vtssmh" 'Beltaine, solar/golden ratio'
doout "$vtswsw" 'Litha (Sommersonnenwende, Mittsommer, shortest-night)'
doout "$vtsimb" 'Lughnasadh (Schnitterfest), solar/golden ratio'
doout "$vtsftn" 'Mabon (Herbsttagundnachtgleiche, harvest festival)'
doout "$vtsblt" 'Samhain (All-Hallowe’en), solar/golden ratio'
doout "$vtsssw" 'Jul (Wintersonnenwende, Mittwinter, longest-night)'
doout "$vtslgh" 'Imbolc (Brighid, Oimelc), solar/golden ratio'
doout "$vtshtn" 'Ēostre/Ôstara (Frühjahrstagundnachtgleiche)'
print -r -- '/* }}} generated */'

SSV: shell-parseable separated values, or separator-separated values

Basic idea is to make CSV into something usable:
• newline (\x0A) is row separator
• field separator (\x1C) is column separator
• n̲o̲ quotes or escape characters
• carriage return (\x0D) represents embedded newlines in cells

Cell content is arbitrary binary except \x0A and \x1C (and NUL).


SSV can easily be operated on from within shell, e.g. with:

	while IFS=$'\x1C' read -rA line; do
		for x in ${!line[*]}; do
			print -r -- "$x=${line[x]@Q}"
		done
		print
	done

This sample script reads in SSV line-by-line and outputs
each cell on a new line, with their index and quoted content.


Apologies for the C file, but it’s much more efficient to
do the conversion f̲r̲o̲m̲ CSV with mmap. It could be done in
mksh of course… and I’d probably have cursed about C less
had I used it… but now it’s there and works.
